@page "/chat"
@inject NavigationManager NavManager
@inject AccountStateService AccountState
@inject UserContext UserContext
@inject DataContext DataContext
@using ChatOnline.Services;
@using ChatOnline.Data;

<h3>ChatPage</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3">
            <p>
                <h5>Search</h5>
                <div class="input-group">
                    <input @bind="_searchUsername" type="text" class="form-control" placeholder="Enter username...">
                    <div class="input-group-append">
                        <button @onclick="SearchAccounts" class="btn btn-primary">Search</button>
                    </div>
                </div>
                @if (_searchResults.Any())
                {
                    <h5>Search Results:</h5>
                    <ul class="list-group">
                        @foreach (var user in _searchResults)
                        {
                            <li class="list-group-item">
                                <span style="cursor: pointer;" @onclick="() => SwitchAccount(user)">@user.Username</span>
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => UpdateAccount(user)">Update</button>
                                <button class="btn btn-outline-danger btn-sm ml-1" @onclick="() => DeleteAccount(user)">Delete</button>
                            </li>
                        }
                    </ul>
                }
            </p>
            <p>
                <button @onclick="GoToReg" class="btn btn-primary mt-3 ml-3">Add account</button>
            </p>
            <h5>Accounts:</h5>
            @foreach (var user in UserContext.GetUsers())
            {
                <div class="mb-2">
                    <span style="cursor: pointer;" @onclick="() => SwitchAccount(user)">@user.Username</span>
                    <button @onclick="() => UpdateAccount(user)" class="btn btn-outline-primary btn-sm">Update</button>
                    <button @onclick="() => DeleteAccount(user)" class="btn btn-outline-danger btn-sm ml-1">Delete</button>
                </div>
            }
            <div class="mt-3 ml-3">
                <p>User ID: @AccountState.Id</p>
                <p>Username: @AccountState.Username</p>
                <p>Status: @AccountState.Status</p>
                @if (!string.IsNullOrEmpty(AccountState.Avatar))
                {
                    <img src="@AccountState.Avatar" alt="Avatar" style="max-width: 150px; max-height: 150px;" />
                }
            </div>
        </div>
        <div class="col-md-9">
            @if (!chatCreated)
            {
                <div class="chat-create-field" @onclick="CreateNewChat">
                    <p class="text-center">Click here to create a new chat</p>
                </div>
            }
            @if (chatCreated)
            {
                <h3 class="mt-3">Chat</h3>
                <div class="chat-container mt-3">
                    <ul class="list-unstyled">
                        <p>
                            <div class="input-group">
                                <input @bind="_userMessage" type="text" class="form-control" placeholder="Type a message...">
                                <div class="input-group-append">
                                    <button @onclick="SendMessage" class="btn btn-primary" type="button">Send</button>
                                </div>
                            </div>
                        </p>
                        <p>
                            <ul>
                                @foreach (var chatMessage in _chatMessages)
                                {
                                    <li>
                                        <strong>@chatMessage.Author (@chatMessage.Id):</strong> @chatMessage.Message
                                        <span class="text-muted">(@chatMessage.Timestamp.ToString("dd/MM/yyyy HH:mm:ss"))</span>
                                    </li>
                                }
                            </ul>
                        </p>
                        <button @onclick="SortByDateTime" class="btn btn-primary">Sort by Date/Time</button>
                        <button @onclick="SortByAuthor" class="btn btn-primary">Sort by Author</button>
                        <button @onclick="DelChat" class="btn btn-primary">Delete Chat</button>
                        <button @onclick="UpdateChatLM" class="btn btn-primary">Update Chat</button>
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string _userMessage;
    private List<ChatMessage> _chatMessages = new List<ChatMessage>();
    private int _messageIdCounter = 1; 
    private string _searchUsername = "";
    private List<User> _searchResults = new List<User>();
    private bool chatCreated = false;
    private Chat _chat;

    private void SearchAccounts()
    {
        _searchResults.Clear();
        if (!string.IsNullOrEmpty(_searchUsername))
        {
            _searchResults = UserContext.GetUsers().Where(u => u.Username.Contains(_searchUsername)).ToList();
        }
    }
    private void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(_userMessage))
        {
            var botResponse = GetBotResponse(_userMessage);
            _chatMessages.Add(new ChatMessage("You", _userMessage, DateTime.Now, _messageIdCounter++));
            _chatMessages.Add(new ChatMessage("Chatbot", botResponse, DateTime.Now, _messageIdCounter++));
            _userMessage = "";
        }
    }

    private string GetBotResponse(string userMessage)
    {
        switch (userMessage.ToLower())
        {
            case "привет":
                return "Привет! О чем вы хотите поговорить?";
            case "как дела":
                return "У меня всё отлично! А у вас как дела?";
            case "хорошо":
                return "Это прекрасно! Чаще улыбайтесь! :)";
            case "плохо":
                return "Это грустно. Надеюсь скоро всё наладится :(";
            case "пока":
                return "Пока-пока!";
            default:
                return "Извините! Я пока плохо понимаю что вы говорите, поэтому не могу ответить на ваше сообщение :(";
        }
    }

    private void SortByDateTime()
    {
        _chatMessages.Sort((msg1, msg2) => msg1.Timestamp.CompareTo(msg2.Timestamp));
    }

    private void SortByAuthor()
    {
        _chatMessages.Sort((msg1, msg2) => msg1.Author.CompareTo(msg2.Author));
    }

    private void SwitchAccount(User user)
    {
        AccountState.Id = user.Id;
        AccountState.Username = user.Username;
        AccountState.Status = user.Status;
        AccountState.Avatar = user.Avatar;
        DataContext.AddUser(user); 
        var chatForUser = UserContext.GetChatForUser(user);
        _chatMessages = chatForUser.Messages;
        NavManager.NavigateTo("/chat");
    }
    private void GoToReg()
    {
        NavManager.NavigateTo("/");
    }
    private User _user = new User("", "", "", "", "", "");

    private void UpdateAccount(User user)
    {
        _user = user;
        NavManager.NavigateTo($"/?userId={user.Id}");
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = NavManager.Uri.Split('=').Last();
        var user = UserContext.GetUsers().FirstOrDefault(u => u.Id == userId);
        if (user != null)
        {
            _user = user;
        }
        else
        {
        }
    }

    private void SaveChanges()
    {
        DataContext.UpdateUser(_user);
        NavManager.NavigateTo("/chat");
    }

    private void DeleteAccount(User user)
    {
        Console.WriteLine($"удаляется или не {user.Username}");
        UserContext.DeleteUser(user);
    }

    private void CreateNewChat()
    {
        DataContext.AddChat(_user);
        chatCreated = true;
    }
    private void DelChat()
    {
        //DataContext.DeleteChat(_chat);
        _chatMessages.Clear();
        chatCreated = false;
    }
    private void UpdateChatLM()
    {
        Console.WriteLine("апдейт или не");
        if (_chat != null)
        {
            //DataContext.UpdateChat(_chat);
            if (_chat.Messages.Count > 0)
            {
                _chat.Messages.RemoveAt(_chat.Messages.Count - 1);
            }
            _chatMessages = _chat.Messages;
        }
    }
}