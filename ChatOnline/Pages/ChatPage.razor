@page "/chat"
@inject NavigationManager NavManager
@inject AccountStateService AccountState
@inject UserContext UserContext
@using ChatOnline.Services;
@using ChatOnline.Data;

<h3>ChatPage</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3 bg-light">
            <div>
                <input @bind="_searchTerm" type="text" class="form-control" placeholder="Search users..." />
                <select class="form-control" @onchange="SearchUsers">
                    <option value="">Select user</option>
                    @foreach (var user in _searchResults)
                    {
                        <option value="@user.Id">@user.Username</option>
                    }
                </select>
            </div>
            <button class="btn btn-primary mt-3 ml-3">Add accaunt</button>
            <div class="mt-3 ml-3">
                <h5>Registered Accounts:</h5>
                @foreach (var user in UserContext.GetUsers())
                {
                    <div class="mb-2">
                        <button @onclick="() => SwitchAccount(user)" class="btn btn-light">@user.Username</button>
                        <button @onclick="() => UpdateAccount(user)" class="btn btn-outline-primary btn-sm">Update</button>
                        <button @onclick="() => DeleteAccount(user)" class="btn btn-outline-danger btn-sm ml-1">Delete</button>
                    </div>
                }
            </div>
            <div class="mt-3 ml-3">
                <p>User ID: @AccountState.Id</p>
                <p>Username: @AccountState.Username</p>
                <p>Status: @AccountState.Status</p>
                @if (!string.IsNullOrEmpty(AccountState.Avatar))
                {
                    <img src="@AccountState.Avatar" alt="Avatar" style="max-width: 150px; max-height: 150px;" />
                }
            </div>
        </div>
        <div class="col-md-9">
            <h3 class="mt-3">Chat</h3>
            <div class="chat-container mt-3">
                <ul class="list-unstyled">
                    <p>
                    <div class="input-group">
                        <input @bind="_userMessage" type="text" class="form-control" placeholder="Type a message...">
                        <div class="input-group-append">
                            <button @onclick="SendMessage" class="btn btn-primary" type="button">Send</button>
                        </div>
                    </div>
                    </p>
                    <p>
                    <ul>
                        @foreach (var chatMessage in _chatMessages)
                        {
                            <li>
                                <strong>@chatMessage.Author (@chatMessage.Id):</strong> @chatMessage.Message
                                <span class="text-muted">(@chatMessage.Timestamp.ToString("dd/MM/yyyy HH:mm:ss"))</span>
                            </li>
                        }
                    </ul>
                    </p>
                    <button @onclick="SortByDateTime" class="btn btn-primary">Sort by Date/Time</button>
                    <button @onclick="SortByAuthor" class="btn btn-primary">Sort by Author</button>
                </ul>
            </div>
        </div>
    </div>
</div>


@code {
    private string _userMessage;
    private List<ChatMessage> _chatMessages = new List<ChatMessage>();
    private int _messageIdCounter = 1;

    private void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(_userMessage))
        {
            var botResponse = GetBotResponse(_userMessage);
            _chatMessages.Add(new ChatMessage("You", _userMessage, DateTime.Now, _messageIdCounter++));
            _chatMessages.Add(new ChatMessage("Chatbot", botResponse, DateTime.Now, _messageIdCounter++));
            _userMessage = "";
        }
    }

    private string GetBotResponse(string userMessage)
    {
        switch (userMessage.ToLower())
        {
            case "привет":
                return "Привет! О чем вы хотите поговорить?";
            case "как дела":
                return "У меня всё отлично! А у вас как дела?";
            case "хорошо":
                return "Это прекрасно! Чаще улыбайтесь! :)";
            case "плохо":
                return "Это грустно. Надеюсь скоро всё наладится :(";
            case "пока":
                return "Пока-пока!";
            default:
                return "Извините! Я пока плохо понимаю что вы говорите, поэтому не могу ответить на ваше сообщение :(";
        }
    }

    private void SortByDateTime()
    {
        _chatMessages.Sort((msg1, msg2) => msg1.Timestamp.CompareTo(msg2.Timestamp));
    }

    private void SortByAuthor()
    {
        _chatMessages.Sort((msg1, msg2) => msg1.Author.CompareTo(msg2.Author));
    }

    private void SwitchAccount(User user)
    {
        AccountState.Id = user.Id;
        AccountState.Username = user.Username;
        AccountState.Status = user.Status;
        AccountState.Avatar = user.Avatar;

        NavManager.NavigateTo("/chat");
    }

    private string _searchTerm = "";
    private List<User> _searchResults = new List<User>();

    private void SearchUsers(ChangeEventArgs e)
    {
        string searchTerm = e.Value.ToString();
        _searchResults = UserContext.SearchUsers(searchTerm);
    }

    private void UpdateAccount(User user)
    {
    }

    private void DeleteAccount(User user)
    {
    }
}